name: Test, Version & Publish

on:
  push:
    branches:
      - master

permissions:
  contents: write
  id-token: write  # Required for trusted publishing

env:
  UV_SYSTEM_PYTHON: 1

jobs:
  test-version-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}  # Use personal token for pushing tags

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          version: "0.7.8"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run tests
        run: uv run pytest

      - name: Install semantic-release
        run: uv tool install python-semantic-release
      - name: Configure Git for semantic-release
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Semantic Release (version bump & tag)
        id: semantic_release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Run semantic release and capture output
          uv tool run semantic-release version --print > release_output.txt 2>&1 || true
          cat release_output.txt
          
          # Check if a new version was created
          if git tag --points-at HEAD | grep -q "^v"; then
            NEW_VERSION=$(git tag --points-at HEAD | grep "^v" | head -1)
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "version_created=true" >> $GITHUB_OUTPUT
            echo "New version created: $NEW_VERSION"
          else
            echo "version_created=false" >> $GITHUB_OUTPUT
            echo "No new version created"
          fi

      - name: Show version info
        if: steps.semantic_release.outputs.version_created == 'true'
        run: |
          echo "New version: ${{ steps.semantic_release.outputs.new_version }}"
          echo "Contents of __init__.py:"
          cat src/job_posting_parser/__init__.py
          echo "Contents of pyproject.toml version:"
          grep version pyproject.toml

      - name: Build package
        if: steps.semantic_release.outputs.version_created == 'true'
        run: uv build

      - name: Publish to PyPI
        if: steps.semantic_release.outputs.version_created == 'true'
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          echo "Publishing to PyPI..."
          uv publish --verbose || {
            echo "Publish failed, checking if it's due to existing version..."
            if echo "$?" | grep -q "400"; then
              echo "Version already exists on PyPI - this may be expected if re-running the workflow"
              exit 0
            else
              echo "Publish failed for another reason"
              exit 1
            fi
          }

      - name: Prune uv cache
        run: uv cache prune --ci